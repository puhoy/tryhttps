// Generated by CoffeeScript 1.9.3
var _blacklistUrl, _getProtocol_Domain_Path, _unblacklistUrl, addToHttpList, addToHttpsList, blacklistUrl, forward_to, getList, query, saveList, unblacklistUrl,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  slice = [].slice;

getList = function(listname) {
  var e, l, list;
  listname = 'tryhttps_' + listname;
  list = [];
  try {
    l = localStorage[listname];
    list = JSON.parse(l);
  } catch (_error) {
    e = _error;
    console.log("error loading list " + listname + "! " + e);
  }
  return lists[listname] = list;
};

saveList = function(listname, list) {
  listname = 'tryhttps_' + listname;
  console.log('saving ' + listname + ': ' + list);
  return localStorage[listname] = JSON.stringify(list);
};

query = {
  active: true,
  currentWindow: true
};

_unblacklistUrl = function() {
  return chrome.tabs.query(query, function(tabs) {
    var currentTab;
    currentTab = tabs[0];
    console.log(currentTab);
    console.log('unblacklisting ' + currentTab.url);
    return unblacklistUrl(currentTab.url);
  });
};

_blacklistUrl = function() {
  return chrome.tabs.query(query, function(tabs) {
    var currentTab;
    currentTab = tabs[0];
    console.log(currentTab);
    return blacklistUrl(currentTab.url);
  });
};

unblacklistUrl = function(url) {
  var domain, index;
  domain = _getProtocol_Domain_Path(url)[1];
  if (indexOf.call(lists['blacklist'], domain) >= 0) {
    console.log('filtering...');
    index = lists['blacklist'].indexOf(domain);
    lists['blacklist'].splice(index, index !== -1 ? 1 : void 0);
    saveList('blacklist', lists['blacklist']);
    console.log.apply(console, ['new blacklist'].concat(slice.call(lists['blacklist'])));
    alert('unblacklisted ' + domain);
  } else {
    return console.log('not in blacklist');
  }
};

blacklistUrl = function(url) {
  var domain;
  domain = _getProtocol_Domain_Path(url)[1];
  if (indexOf.call(lists['blacklist'], domain) < 0) {
    lists['blacklist'].push(domain);
    saveList('blacklist', lists['blacklist']);
    console.log.apply(console, ['new blacklist'].concat(slice.call(lists['blacklist'])));
    alert('blacklisted ' + domain);
  } else {
    return console.log('already in blacklist');
  }
};

addToHttpsList = function(url) {
  var domain;
  domain = _getProtocol_Domain_Path(url)[1];
  if (indexOf.call(lists['httpslist'], domain) < 0) {
    console.log(typeof lists['httpslist']);
    lists['httpslist'].push(domain);
    saveList('httpslist', lists['httpslist']);
    console.log.apply(console, ['new httpslist'].concat(slice.call(lists['httpslist'])));
  }
};

addToHttpList = function(url) {
  var domain;
  domain = _getProtocol_Domain_Path(url)[1];
  if (indexOf.call(lists['httplist'], domain) < 0) {
    lists['httplist'].push(domain);
    return console.log.apply(console, lists['httplist']);
  }
};

_getProtocol_Domain_Path = function(url) {
  var arr, dom, path, prot;
  arr = url.split('/');
  prot = arr[0];
  dom = arr[2];
  path = arr.slice(3);
  return [prot, dom, path.join('/')];
};

forward_to = function(newUrl, tabId) {
  console.log('forwarding tab ' + tabId + ' to ' + newUrl);
  return chrome.tabs.update(tabId, {
    url: newUrl
  });
};

//# sourceMappingURL=helpers.js.map
