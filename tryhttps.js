// Generated by CoffeeScript 1.9.3
var _tryDomain, lists, tryHttps,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

lists = {};

lists['blacklist'] = getList('blacklist');

lists['httpslist'] = getList('httpslist');

lists['httplist'] = [];

chrome.runtime.onMessage.addListener(function(request, sender, callback) {
  if (request.type === 'blacklist') {
    console.log('blacklisting...');
    _blacklistUrl();
  }
  if (request.type === 'unblacklist') {
    console.log('unblacklisting...');
    return _unblacklistUrl();
  }
});

_tryDomain = function(domain, path, tabId, forward) {
  var got_2xx, xhr;
  if (forward == null) {
    forward = true;
  }
  xhr = new XMLHttpRequest();
  xhr.open("GET", "https://" + domain, true);
  got_2xx = false;
  xhr.onreadystatechange = function() {
    if (xhr.readyState === 2) {
      if (xhr.status >= 200 && xhr.status < 300) {
        got_2xx = true;
        addToHttpsList('https://' + domain);
        if (forward) {
          return forward_to('https://' + [domain, path].join('/'), tabId);
        }
      }
    }
  };
  xhr.timeout = 10000;
  xhr.ontimeout = function() {
    got_2xx = false;
    console.log('no https for ' + domain);
    return addToHttpList('http://' + domain);
  };
  xhr.send();
  return got_2xx;
};

tryHttps = function(url, tabId) {
  var domain, path, pdm, protocol;
  pdm = _getProtocol_Domain_Path(url);
  protocol = pdm[0];
  domain = pdm[1];
  path = pdm[2];
  if (indexOf.call(lists['blacklist'], domain) >= 0) {
    return false;
  }
  if (protocol === 'http:') {
    if ((indexOf.call(lists['httplist'], domain) >= 0)) {
      console.log('already tried, no https for ' + domain);
      return false;
    }
    if ((indexOf.call(lists['httpslist'], domain) >= 0)) {
      return forward_to('https://' + [domain, path].join('/'), tabId);
    } else {
      if (_tryDomain(domain, path, tabId)) {
        return true;
      } else {
        return false;
      }
    }
  }
};

chrome.tabs.onUpdated.addListener(function(tabId, changeInfo, tab) {
  if (changeInfo) {
    if (changeInfo.url) {
      return tryHttps(changeInfo.url, tabId);
    }
  }
});

chrome.tabs.onCreated.addListener(function(tabId, changeInfo, tab) {
  if (changeInfo) {
    if (changeInfo.url) {
      return tryHttps(changeInfo.url, tabId);
    }
  }
});

//# sourceMappingURL=tryhttps.js.map
