// Generated by CoffeeScript 1.10.0
var _getProtocol_Domain_Path, _tryDomain, addToHttpList, addToHttpsList, blacklist, httplist, httpslist, tryHttps,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

blacklist = [];

httpslist = [];

httplist = [];

addToHttpsList = function(url) {
  var domain;
  domain = _getProtocol_Domain_Path(url)[1];
  if (indexOf.call(httpslist, domain) < 0) {
    httpslist.push(domain);
    return console.log.apply(console, httpslist);
  }
};

addToHttpList = function(url) {
  var domain;
  domain = _getProtocol_Domain_Path(url)[1];
  if (indexOf.call(httplist, domain) < 0) {
    httplist.push(domain);
    return console.log.apply(console, httplist);
  }
};

_tryDomain = function(domain) {
  var got_200, xhr;
  xhr = new XMLHttpRequest();
  xhr.open("GET", "https://" + domain, true);
  got_200 = false;
  xhr.onreadystatechange = function() {
    if (xhr.readyState === 2) {
      if (xhr.status === 200) {
        got_200 = true;
        return addToHttpsList('https://' + domain);
      }
    }
  };
  xhr.timeout = 10000;
  xhr.ontimeout = function() {
    got_200 = false;
    return addToHttpList('http://' + domain);
  };
  xhr.send();
  return got_200;
};

_getProtocol_Domain_Path = function(url) {
  var arr, dom, path, prot;
  arr = url.split('/');
  prot = arr[0];
  dom = arr[2];
  path = arr.slice(3);
  return [prot, dom, path.join('/')];
};

tryHttps = function(url) {
  var domain, path, pdm, protocol;
  pdm = _getProtocol_Domain_Path(url);
  protocol = pdm[0];
  domain = pdm[1];
  path = pdm[2];
  if (indexOf.call(blacklist, url) < 0) {
    if (indexOf.call(blacklist, domain) >= 0) {
      return false;
    }
    if (protocol === 'https:') {
      if ((indexOf.call(httpslist, domain) >= 0)) {
        return false;
      } else {
        _tryDomain(domain);
        return false;
      }
    }
    if (protocol === 'http:') {
      if ((indexOf.call(httplist, domain) >= 0)) {
        return false;
      } else {
        if (_tryDomain(domain)) {
          return 'https://' + [domain, path].join('/');
        } else {
          return false;
        }
      }
    }
  }
};

chrome.tabs.onUpdated.addListener(function(tabId, changeInfo, tab) {
  var newUrl;
  if (changeInfo) {
    if (changeInfo.url) {
      newUrl = tryHttps(changeInfo.url);
      if (newUrl) {
        return chrome.tabs.update(tabId, {
          url: newUrl
        });
      }
    }
  }
});

chrome.tabs.onCreated.addListener(function(tabId, changeInfo, tab) {
  var newUrl;
  if (changeInfo) {
    if (changeInfo.url) {
      newUrl = tryHttps(changeInfo.url);
      if (newUrl) {
        return chrome.tabs.update(tabId, {
          url: newUrl
        });
      }
    }
  }
});

//# sourceMappingURL=tryhttps.js.map
